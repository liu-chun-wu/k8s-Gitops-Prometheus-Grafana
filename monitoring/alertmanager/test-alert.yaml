apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: test-discord-alert
  namespace: monitoring
  labels:
    app: kube-prometheus-stack
    prometheus: kube-prometheus-stack-prometheus
spec:
  groups:
  - name: test.alerts
    interval: 30s
    rules:
    
    # 測試用警報 - 會立即觸發
    - alert: TestDiscordNotification
      expr: vector(1) > 0
      for: 1m
      labels:
        severity: info
        service: test
      annotations:
        summary: "🧪 Discord 通知測試"
        description: "這是一個測試警報，用於驗證 Discord 通知是否正常運作。如果您在 Discord 收到此訊息，表示警報系統配置成功！"
        
    # 測試 Warning 級別
    - alert: TestWarningAlert
      expr: vector(1) > 0.5
      for: 2m
      labels:
        severity: warning
        service: test
      annotations:
        summary: "⚠️ 測試 Warning 警報"
        description: "這是一個 Warning 級別的測試警報"
        
    # 測試 Critical 級別（預設關閉）
    - alert: TestCriticalAlert
      expr: vector(1) > 2  # 不會觸發，因為 vector(1) 永遠等於 1
      for: 1m
      labels:
        severity: critical
        service: test
      annotations:
        summary: "🚨 測試 Critical 警報"
        description: "這是一個 Critical 級別的測試警報"
        
---
# 手動觸發測試的 ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: alert-test-instructions
  namespace: monitoring
data:
  instructions.md: |
    # 測試警報系統
    
    ## 1. 設定 Discord Webhook
    
    首先，需要在 Discord 建立 Webhook：
    1. 在 Discord 伺服器中，進入頻道設定
    2. 選擇「整合」→「Webhook」
    3. 建立新的 Webhook 並複製 URL
    
    ## 2. 更新 Secret
    
    ```bash
    # 編輯 Secret，替換 YOUR_DISCORD_WEBHOOK_URL
    kubectl edit secret alertmanager-discord-webhook -n monitoring
    
    # 或使用以下命令直接更新
    kubectl create secret generic alertmanager-discord-webhook \
      --from-literal=webhook-url='YOUR_ACTUAL_DISCORD_WEBHOOK_URL' \
      --namespace=monitoring \
      --dry-run=client -o yaml | kubectl apply -f -
    ```
    
    ## 3. 部署警報配置
    
    ```bash
    # 部署 Discord 轉發服務
    kubectl apply -f monitoring/alertmanager/alertmanager-discord-secret.yaml
    
    # 部署警報規則
    kubectl apply -f monitoring/alertmanager/prometheus-rules.yaml
    
    # 部署測試警報
    kubectl apply -f monitoring/alertmanager/test-alert.yaml
    ```
    
    ## 4. 驗證警報
    
    ```bash
    # 檢查警報規則是否載入
    kubectl get prometheusrule -n monitoring
    
    # 檢查 AlertManager 狀態
    kubectl port-forward -n monitoring svc/kube-prometheus-stack-alertmanager 9093:9093
    # 開啟瀏覽器訪問 http://localhost:9093
    
    # 檢查 Prometheus 警報狀態
    kubectl port-forward -n monitoring svc/kube-prometheus-stack-prometheus 9090:9090
    # 開啟瀏覽器訪問 http://localhost:9090/alerts
    ```
    
    ## 5. 手動觸發測試
    
    如果要立即觸發 Critical 警報測試，可以暫時修改規則：
    
    ```bash
    kubectl edit prometheusrule test-discord-alert -n monitoring
    # 將 TestCriticalAlert 的 expr 改為: vector(1) > 0
    ```
    
    ## 6. 清理測試警報
    
    測試完成後，刪除測試警報：
    
    ```bash
    kubectl delete prometheusrule test-discord-alert -n monitoring
    ```